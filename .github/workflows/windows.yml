name: windows-build
on: push
jobs:
  build-debug:
    runs-on: windows-latest
    strategy:
      fail-fast: false
    timeout-minutes: 500
    env:
      buildDir: '${{ github.workspace }}/build'
    steps:
      - name: Add GNU tar to path
        run: echo "C:\Program Files\Git\usr\bin" >> $GITHUB_PATH
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          sdk: 10.0.19041.0
      - name: Install Clang
        run: choco install -y llvm
      - name: Install Neovim Nightly (needed for tests)
        run: choco install -y neovim --pre
      - name: Add Neovim to PATH
        run: echo "C:\tools\neovim\Neovim\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - uses: lukka/run-vcpkg@v7
        with:
          setupOnly: true
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          appendedCacheKey: ${{ hashFiles('**/vcpkg.json')}}
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed
      - name: Generate CMake files (Debug mode)
        run: |
          cmake -B build . -DCMAKE_TOOLCHAIN_FILE=.\vcpkg\scripts\buildsystems\vcpkg.cmake -DCMAKE_BUILD_TYPE=Release -G Ninja -DCMAKE_C_COMPILER=clang.exe -DCMAKE_CXX_COMPILER=clang++.exe
        shell: cmd
      - name: Build nvui and nvui-test
        run: |
          cmake --build build
        shell: cmd
      - name: Run tests
        run: |
          cd build
          .\nvui_test
        shell: cmd
  build-release:
    # Only on main branch
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    strategy:
      fail-fast: false
    timeout-minutes: 500
    env:
      buildDir: '${{ github.workspace }}/build'
    steps:
      - name: Add GNU tar to path
        run: echo "C:\Program Files\Git\usr\bin" >> $GITHUB_PATH
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          sdk: 10.0.19041.0
      - name: Install Clang
        run: choco install -y llvm
      - uses: lukka/run-vcpkg@v7
        with:
          setupOnly: true
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          appendedCacheKey: ${{ hashFiles('**/vcpkg.json')}}
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed
      - name: Generate CMake files (Release mode)
        run: |
          cmake -B build . -DCMAKE_TOOLCHAIN_FILE=.\vcpkg\scripts\buildsystems\vcpkg.cmake -DCMAKE_BUILD_TYPE=Release -G Ninja -DCMAKE_C_COMPILER=clang.exe -DCMAKE_CXX_COMPILER=clang++.exe
        shell: cmd
      - name: Build in Release mode (nvui only)
        run: cmake --build build --target nvui
        shell: cmd
      - name: Create final output folder to zip up
        run: |
          cd build
          mkdir nvui
          cd nvui
          mkdir bin
          cd ..
          (gci -Path ./* -Include *.dll, *.exe, *.conf).fullname | foreach {Copy-Item -Path $_ -Destination nvui/bin}
          Copy-Item -Recurse -Path plugins -Destination nvui/bin
          Copy-Item -Recurse -Path ../assets -Destination nvui
          Copy-Item -Recurse -Path ../vim -Destination nvui
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: nvui-win64
          if-no-files-found: ignore
          path: build/nvui
